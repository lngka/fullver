#######################Param check##########################
program requires one single command line argument, named $1
exit if no $1
#######################Define some contants##########################
K1="ein.tex"
K2="grund.tex"
K3="sort.tex"
K4="model.tex"
K5="einfach.tex"
K6="prio.tex"
K7="bal.tex"
K8="hash.tex"
K9="union.tex"
K10="dfs.tex"
K11="kurz.tex"
#######################Variable aufgaben##########################
Is the result of a long chain of commands:
1) cat wz$1.tex
Read the file named "wz$1.tex" with $1 being the first parameter passed in
fullver. Pipe to (2)

2) grep -v ^%
-v: reverse option
^%: regEx means starts with %
Filter out all lines that starts with % (the commenting sign for Latex).
Pipe to (3)

3) grep Punkte\)
Keep only lines that contain the string literal "Punkte)", The backlash "\"
escape the
special meaning for ")". Pipe to (4)

4) sed 's/Die//'
s: subtitute
/Die//: subtitute the exression "Die" with an empty exression,
effectively removes the word "Die".
Sed is line-oriented, subtitution occurs once per line by default.
Pipe to (5)

5) sed 's/Aufgaben//'
subtitutes the word "Aufgaben" with an empty string. Pipe to (6)

6) sed 's/[%]*([je]*[ +0123456789$=]*Punkte)//g'
match any occurance of literal % followed by
any combination of "j" and "e" followed by
any combination of the following characters +0123456789$= including whitespaces
and literal string "Punkte"
NOTE:
On my laptop, sed requires an additional -r option to work as intended???

all matches will be subtituted with an empty string "". Pipe to (7)

7) sed 's/sowie//'
effectively remove literal string "sowie" from input. Pipe to (8)

8) sed 's/und//'
effectively remove literal string "und" from input. Pipe to (9)

9) sed 's/ [,.]//g'
effectively remove a whitespace followed by a full stop or a comma
Pipe to (10)

10) sed 's/W[.0123456789]*//g'
effectively remove all occurance of literal, case sensitive "W" followed by
any combination of the following characters .0123456789 without whitespace
Assign output to variable aufgaben

#######################cleaning##########################
rm full$1.tex 2>/dev/null
delete full$1.tex suppress all error messages

#######################Writing start##########################
cat wz$1.tex >full$1.tex
copy wz$1.tex to a new file named full$1.tex.
NOTE: $1 is the first command line argument

echo >>full$1.tex
append a newline to full$1.tex

echo "\\newpage" >>full$1.tex
append string literal "\newpage" to full$1.tex
the extra backlash at echo "\\newpage" is to escape the next backlash

echo "\\begin{Tproblemsection}" >>full$1.tex
append string literal "\begin{Tproblemsection}" to full$1.tex

echo "\\renewcommand{\label}[1]{\\ignorespaces}" >>full$1.tex
append string literal "\renewcommand{\label}[1]{\ignorespaces}" to full$1.tex

echo "\\noindent{\\bf Auszug aus dem Skript:}" >>full$1.tex
append string literal "\noindent{\bf Auszug aus dem Skript:}" to full$1.tex

echo >>full$1.tex
append a newline to full$1.tex

#######################For each in variable aufgaben##########################
each item in $aufgaben is $a
variable TEST is the result of the following commands
1) echo $a
output the content of $a pipe to (2)

2)sed 's/[1234567890][1234567890]*.[1234567890][1234567890]*/&OKOKOKOKOK_WEG/'
match <a digit><0 or 1 more digit><1 arbitrary char><a digit><0 or 1 more digit>
globally.

&=the sign for matched string itself

all matched strings will be replaced with itself appended by the string
"OKOKOKOKOK_WEG". Pipe to (3)

3) sed 's/_WEG.*//'
effectively remove the first occurance of literal string "_WEG" and
everything after it from input.
Assign output to variable
